#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os #–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
import asyncio #–î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
import psycopg2 # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import requests # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
#–ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π aiogram
from aiogram import Bot, Dispatcher, types #–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram.filters.command import Command #–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.state import StatesGroup, State #–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
from aiogram.fsm.storage.memory import MemoryStorage #–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
from aiogram.fsm.context import FSMContext #–ö–æ–Ω—Ç–µ–∫—Å—Ç FSM ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
import datetime # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏

#–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=bot_token)


#–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞–º—è—Ç–∏ –¥–ª—è FSM
storage = MemoryStorage()

#–°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dp = Dispatcher(storage=storage)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
password_db = os.getenv('parol')
user_db = os.getenv('user')
database_db = os.getenv('database')
host_db = os.getenv('host')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    "host": host_db,
    "database": database_db ,
    "user": user_db,
    "password": password_db
}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
dohod_pashod= ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–ê–°–•–û–î"), KeyboardButton(text="–î–û–•–û–î")]
    ],
    resize_keyboard=True # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
valut= ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="RUB"), KeyboardButton(text="EUR"), KeyboardButton(text="USD")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegisterState(StatesGroup):
    login = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
class OperationState(StatesGroup):
    type = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    sum = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    date = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    comment = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–ø–µ—Ä–∞—Ü–∏–π
class OperationValutState(StatesGroup):
    valut = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞! –Ø –≤—Å—ë –µ—â–µ –≤–µ–ª–∏–∫–∏–π –±–æ—Ç, "
                         "–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä, –≤—Ä–µ–º—è –∏–¥–µ—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–æ —Å–µ–≥–æ–¥–Ω—è —è —Å–æ–∑–¥–∞–Ω –¥–ª—è –†–ì–ó!üò¢\n"
                         "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
                         "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (P.s. –ë–µ–∑ –Ω–µ—ë —Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –Ω–∏—á–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—èüòà)\n"
                         "/add_operation - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (P.s. —Ç—É—Ç –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã\—Ä–∞—Å—Ö–æ–¥—ã)\n"
                         "/operations - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π (P.s. —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg
@dp.message(Command('reg'))
async def registacia(message: types.Message, state: FSMContext):
    chat_id = message.chat.id # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**DB_CONFIG)
    with conn.cursor() as cursor:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT id FROM users WHERE chat_id = %s", (str(chat_id),))
        if cursor.fetchone():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!üòò")
            return

    await message.answer("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞
    await state.set_state(RegisterState.login)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
@dp.message(RegisterState.login)
async def register_polzovatel(message: types.Message, state: FSMContext):
    username = message.text # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–∏–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if not username:
        await message.answer("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –Ω—É–∂–Ω—ã —Ü–∏—Ñ–µ—Ä–∫–∏ –∏–ª–∏ –±—É–∫–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
        return

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = psycopg2.connect(**DB_CONFIG)

        with conn.cursor() as cursor:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "INSERT INTO users (name, chat_id) VALUES (%s, %s)",
                (username, str(chat_id))
            )
            conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

        await message.answer(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {username}!"
                             f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤ –º–æ—é –æ–±–∏—Ç–µ–ª—å!üòàüòé")
        await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except psycopg2.IntegrityError: # –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞
        await message.answer("–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç, –Ω–µ–ª—å–∑—è –±—ã—Ç—å —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç."
                             " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.‚ò∫Ô∏è")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_operation
@dp.message(Command('add_operation'))
async def dobav_operation(message: types.Message, state: FSMContext):
    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = psycopg2.connect(**DB_CONFIG)
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM users WHERE chat_id = %s", (chat_id,))
        if not cursor.fetchone(): # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg.")
            return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=dohod_pashod)
    await state.set_state(OperationState.type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(OperationState.type)
async def vvod_sum(message: types.Message, state: FSMContext):
    tip = message.text.upper()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
    if tip not in ("–†–ê–°–•–û–î", "–î–û–•–û–î"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –†–ê–°–•–û–î –∏–ª–∏ –î–û–•–û–î, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    await state.update_data(type=tip) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(OperationState.sum)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(OperationState.sum)
async def vvod_date(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
        sum = float(message.text)
        if sum <= 0: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
            raise ValueError
        await state.update_data(sum=sum) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-01):")
        await state.set_state(OperationState.date)
    except ValueError: # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∏–ª–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ–µ—Ä–∫–∏, –∞ –Ω–µ –±—É–∫–æ–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.‚úåÔ∏è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@dp.message(OperationState.date)
async def vvod_comment(message: types.Message, state: FSMContext):

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î) –≤ –æ–±—ä–µ–∫—Ç date, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –≤—Ä–µ–º—è
        date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
        await state.update_data(date=date)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        await state.set_state(OperationState.comment)
    except ValueError: # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.üòæ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
@dp.message(OperationState.comment)
async def save_operation(message: types.Message, state: FSMContext):
    comment = message.text
    await state.update_data(comment=comment) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    data = await state.get_data() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    chat_id = str(message.chat.id)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = psycopg2.connect(**DB_CONFIG)
    with conn.cursor() as cursor:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ë–î
        cursor.execute("""
            INSERT INTO operations (date, sum, chat_id, type_operation, comment)
            VALUES (%s, %s, %s, %s, %s)
        """, (
            data["date"], data["sum"], chat_id, data["type"], data["comment"]
        ))
        conn.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è


    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!üî•")
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /operations
@dp.message(Command('operations'))
async def prosmotr_operation(message: types.Message, state: FSMContext):
    chat_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = psycopg2.connect(**DB_CONFIG)
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM users WHERE chat_id = %s", (chat_id,))
        if not cursor.fetchone():  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg.")
            return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=valut)
    await state.set_state(OperationValutState.valut)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
@dp.message(OperationValutState.valut)
async def pokazat_operacii(message: types.Message, state: FSMContext):
    valuta = message.text.upper()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
    if valuta not in ("RUB", "USD", "EUR"):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    chat_id = str(message.chat.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = psycopg2.connect(**DB_CONFIG)
    with conn.cursor() as cursor:
        cursor.execute("""
            SELECT date, sum, type_operation, comment
            FROM operations
            WHERE chat_id = %s
            ORDER BY date DESC
        """, (chat_id,))
        operations = cursor.fetchall() # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏

    # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç
    if not operations:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        await state.clear()
        return

    rate = 1.0 # –ù–∞—á–∞–ª—å–Ω—ã–π –∫—É—Ä—Å (–¥–ª—è RUB)

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –Ω–µ —Ä—É–±–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
    if valuta in ("USD", "EUR"):
        try:
            # –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
            url = f"http://localhost:5001/rate?currency={valuta}"
            response = requests.get(url)
            if response.status_code == 200:
                rate = response.json()["rate"] # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
            elif response.status_code == 400:
                await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞ (400): UNKNOWN CURRENCY.")
                return
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (500): UNEXPECTED ERROR.")
                return
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
            return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = []
    for date, summ, tip, comment in operations:
        converted = round(float(summ) / rate, 2) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
        messages.append(f"_______________________________________________\n"
                        f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {date}\n"
                        f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {tip}\n"
                        f"–°—É–º–º–∞: {converted} {valuta}\n"
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
                        f"______________________________________________\n")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("\n".join(messages))
    await state.clear() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

#–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    #–ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    await dp.start_polling(bot)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())