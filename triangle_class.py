# Определение пользовательского исключения для некорректных сторон треугольника
class IncorrectTriangleSides(Exception):
    pass

# Класс, представляющий треугольник
class Triangle:
    # Конструктор класса, принимающий три стороны треугольника
    def __init__(self, a: float, b: float, c: float):

        # Проверка, что все стороны положительные числа
        if not (a > 0 and b > 0 and c > 0):
            # Выбрасываем исключение, если хотя бы одна сторона не положительная
            raise IncorrectTriangleSides("Все стороны должны быть положительными")

        # Сортируем стороны для проверки неравенства треугольника
        sides = sorted([a, b, c])
        # Проверка неравенства треугольника (сумма двух меньших сторон должна быть больше третьей)
        if sides[0] + sides[1] <= sides[2]:
            # Выбрасываем исключение, если неравенство не выполняется
            raise IncorrectTriangleSides("Не выполняется неравенство треугольника")

        # Если проверки пройдены, сохраняем стороны как атрибуты объекта
        self.a = a
        self.b = b
        self.c = c

    # Метод для определения типа треугольника
    def triangle_type(self) -> str:
        # Проверка на равносторонний треугольник
        if self.a == self.b == self.c:
            return "equilateral"
        # Проверка на равнобедренный треугольник
        elif self.a == self.b or self.a == self.c or self.b == self.c:
            return "isosceles"
        # Если все стороны разные - разносторонний треугольник
        else:
            return "nonequilateral"

    # Метод для вычисления периметра треугольника
    def perimeter(self) -> float:
        # Периметр - сумма всех сторон
        return self.a + self.b + self.c

# Блок тестирования функциональности класса
try:
    # Создаем экземпляр треугольника со сторонами 4, 4, 5
    t = Triangle(4, 4, 5)
    # Выводим тип треугольника
    print(f"Тип: {t.triangle_type()}")
    # Выводим периметр треугольника
    print(f"Периметр: {t.perimeter()}")
except IncorrectTriangleSides as e:
    # Обработка исключения в случае некорректных сторон
    print(f"Ошибка: {e}")