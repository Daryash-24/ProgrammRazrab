#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os #–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
import asyncio #–î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
import psycopg2 # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
import requests # –î–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º

#–ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π aiogram
from aiogram import Bot, Dispatcher, types #–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram.filters.command import Command #–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.state import StatesGroup, State #–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
from aiogram.fsm.storage.memory import MemoryStorage #–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
from aiogram.fsm.context import FSMContext #–ö–æ–Ω—Ç–µ–∫—Å—Ç FSM ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

#–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=bot_token)


#–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞–º—è—Ç–∏ –¥–ª—è FSM
storage = MemoryStorage()

#–°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dp = Dispatcher(storage=storage)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
password_db = os.getenv('parol')
user_db = os.getenv('user')
database_db = os.getenv('database')
host_db = os.getenv('host')
DB_CONFIG = {
    "host": host_db,
    "database": database_db ,
    "user": user_db,
    "password": password_db
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db_connection():
    return psycopg2.connect(**DB_CONFIG)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")],
            [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")]
        ],
        resize_keyboard=True # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
class CurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
class DeleteCurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
class UpdateCurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
class ConvertState(StatesGroup):
    currency_name = State()
    amount = State()

# URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
CURRENCY_MANAGER_URL = "http://localhost:5001"  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏
CURRENCY_DATA_MANAGER_URL = "http://localhost:5002"  # –î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–∞—Ö
ADMIN_MANAGER_URL = "http://localhost:5003"  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    if is_admin(message.chat.id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω, —è —Ä–∞–¥ —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–æ–µ–π —Å–∫—Ä–æ–º–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"    )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞! –Ø –≤—Å—ë –µ—â–µ –≤–µ–ª–∏–∫–∏–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä –∏ —É–≤–∞–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ üòà\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
@dp.message(Command('manage_currency'))
async def manage_currency(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–ª—é—Ç–æ–π:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency_knopka(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(CurrencyState.currency_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
@dp.message(CurrencyState.currency_name)
async def add_currency(message: types.Message, state: FSMContext):
    currency_name = message.text.upper()
    await state.update_data(currency_name=currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
    await state.set_state(CurrencyState.currency_rate)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
@dp.message(CurrencyState.currency_rate)
async def add_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))

        data = await state.get_data()
        currency_name = data['currency_name']
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
            response = requests.post(
                f"{CURRENCY_MANAGER_URL}/load",
                json={"currency_name": currency_name, "rate": rate}
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if response.status_code == 200:
                await message.answer(f"–í–∞–ª—é—Ç–∞: {currency_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            elif response.status_code == 400 and "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in response.json().get("error", ""):
                await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                await message.answer(
                    f"–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")  # –î–æ–±–∞–≤–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫

        except requests.exceptions.RequestException:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –≤–∞–ª—é—Ç")
    except ValueError:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –±—É–∫–æ–≤–∫–∏ –¥–ª—è –∫—É—Ä—Å–∞ –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòì")
        return
    await state.clear() # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency_knopka(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(DeleteCurrencyState.currency_name)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
@dp.message(DeleteCurrencyState.currency_name)
async def delete_currency(message: types.Message, state: FSMContext):
    currency_name = (message.text.upper())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
    response = requests.post(
        f"{CURRENCY_MANAGER_URL}/delete",
        json={"currency_name": currency_name},
    )

    if response.status_code == 200:
        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    elif response.status_code == 404:
        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear() # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def update_currency_knopka(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(UpdateCurrencyState.currency_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
@dp.message(UpdateCurrencyState.currency_name)
async def update_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.strip().upper()
    await state.update_data(currency_name=currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
    await state.set_state(UpdateCurrencyState.currency_rate)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
@dp.message(UpdateCurrencyState.currency_rate)
async def update_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text.replace(',', '.'))
        data = await state.get_data()
        currency_name = data['currency_name']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        response = requests.post(
            f"{CURRENCY_MANAGER_URL}/update_currency",
            json={"currency_name": currency_name, "rate": rate},
        )

        if response.status_code == 200:
            await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {rate}")
        elif response.status_code == 404:
            await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞",)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫—É—Ä—Å–∞")
        return

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
@dp.message(Command('get_currencies'))
async def get_currencies_command(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É data-manager
    response = requests.get(
        f"{CURRENCY_DATA_MANAGER_URL}/currencies",
    )
    if response.status_code == 200:
        currencies = response.json()

        if not currencies:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç.")
            return
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç
        currencies_list = "\n".join(
            [f"‚Ä¢ {curr['currency_name']}: {curr['rate']} RUB"
                 for curr in currencies]
        )

        await message.answer(
            f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:\n\n{currencies_list}"
        )

    elif response.status_code == 404:
        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø—É—Å—Ç.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç.")


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /convert
@dp.message(Command('convert'))
async def convert_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(ConvertState.currency_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Å—É–º–º—ã
@dp.message(ConvertState.currency_name)
async def process_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.upper() # –ü–µ—Ä–µ–≤–æ–¥ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    await state.update_data(currency_name=currency_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    await state.set_state(ConvertState.amount)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å
@dp.message(ConvertState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        data = await state.get_data()
        currency_name = data['currency_name']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–µ—Ä–≤–∏—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        response = requests.get(
            f"{CURRENCY_DATA_MANAGER_URL}/convert",
            params={
                'currency_name': currency_name,
                'amount': amount
            }
        )

        if response.status_code == 200:
            result = response.json()
            await message.answer(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n\n"
                f"{amount} {currency_name} = {result['converted_amount']} RUB\n"
                f"–ö—É—Ä—Å: 1 {currency_name} = {result['rate']} RUB"
            )
        elif response.status_code == 404:
            await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã")

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, —è –≤—Å—ë –µ—â–µ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –±—É–∫–≤—ã –≤ –∫—É—Ä—Å!!!")
        return
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ (—Ç–∏–ø–æ –º–µ–Ω—é)
@dp.message(Command('help'))
async def help_command(message: types.Message):
    # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    commands = [
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
        "/manage_currency - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞)",
        "/get_currencies - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç",
        "/convert - –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª–∏"
    ]
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join(commands))

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(chat_id):
    response = requests.get(f"{ADMIN_MANAGER_URL}/check_admin?chat_id={chat_id}")
    if response.status_code == 200:
        data = response.json()
        return data.get("is_admin", False) # –ï—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    return False

#–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    #–ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    await dp.start_polling(bot)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())