#–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os #–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
import asyncio #–î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
import psycopg2 # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
#–ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π aiogram
from aiogram import Bot, Dispatcher, types #–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram.filters.command import Command #–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.state import StatesGroup, State #–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
from aiogram.fsm.storage.memory import MemoryStorage #–•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
from aiogram.fsm.context import FSMContext #–ö–æ–Ω—Ç–µ–∫—Å—Ç FSM ‚Äî –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–≥–∞–º
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

#–ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN
bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=bot_token)

#–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞–º—è—Ç–∏ –¥–ª—è FSM
storage = MemoryStorage()

#–°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
dp = Dispatcher(storage=storage)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
password_db = os.getenv('parol')
user_db = os.getenv('user')
database_db = os.getenv('database')
host_db = os.getenv('host')
DB_CONFIG = {
    "host": host_db,
    "database": database_db,
    "user": user_db,
    "password": password_db
}

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(**DB_CONFIG)
cur = conn.cursor()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏ (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º)
manage_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")]
    ],
    resize_keyboard=True  # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start"), KeyboardButton(text="/manage_currency")],
        [KeyboardButton(text="/get_currencies"), KeyboardButton(text="/convert")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start")],
        [KeyboardButton(text="/get_currencies"), KeyboardButton(text="/convert")]
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
class CurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
class DeleteCurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
class UpdateCurrencyState(StatesGroup):
    currency_name = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    currency_rate = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –∫—É—Ä—Å–∞ –∫ —Ä—É–±–ª—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã
class ConvertState(StatesGroup):
    currency_name = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    amount = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Å—Å—É–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ø–æ chat_id)
def is_admin(chat_id):
    cur.execute("SELECT chat_id FROM admins WHERE chat_id = %s::VARCHAR", (str(chat_id),))
    return cur.fetchone() is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def start_command(message: types.Message):
    if is_admin(message.chat.id):
        # –ê–¥–º–∏–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω, —è —Ä–∞–¥ —Ç–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–æ–µ–π —Å–∫—Ä–æ–º–Ω–æ–π –æ–±–∏—Ç–µ–ª–∏!", reply_markup=admin_keyboard)
    else:
        # –û–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –±–∞–∑–æ–≤–æ–µ –º–µ–Ω—é
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞! –Ø –≤—Å—ë –µ—â–µ –≤–µ–ª–∏–∫–∏–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–∏—Ä –∏ —É–≤–∞–∂–∞–µ—Ç, —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤üòà", reply_markup=user_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manage_currency (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message(Command('manage_currency'))
async def manage_currency_admin(message: types.Message):
    if is_admin(message.chat.id):
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_keyboard)
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def add_currency(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(CurrencyState.currency_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫—É—Ä—Å–∞
@dp.message(CurrencyState.currency_name)
async def vvod_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.upper() # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("SELECT currency_name FROM currencies WHERE currency_name = %s", (currency_name,))
    result = cur.fetchone()

    # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if result:
        await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
    # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ
    else:
        await state.update_data(currency_name=currency_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
        await state.set_state(CurrencyState.currency_rate)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –≤ –ë–î
@dp.message(CurrencyState.currency_rate)
async def vvod_currency_rate(message: types.Message, state: FSMContext):
    try:
        rate = float(message.text)
        data = await state.get_data()
        currency_name = data['currency_name']

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cur.execute("INSERT INTO currencies (currency_name, rate) VALUES (%s, %s)", (currency_name, rate))
        conn.commit()

        await message.answer(f"–í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫—É—Ä—Å–æ–º {rate} –∫ —Ä—É–±–ª—é.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 85.50")
        return

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É")
async def delete_currency(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteCurrencyState.currency_name)

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@dp.message(DeleteCurrencyState.currency_name)
async def vvod_currency_name_to_delete(message: types.Message, state: FSMContext):
    currency_name = message.text.upper() # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("SELECT currency_name FROM currencies WHERE currency_name = %s", (currency_name,))
    result = cur.fetchone()

    if result:
        # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
        cur.execute("DELETE FROM currencies WHERE currency_name = %s", (currency_name,))
        conn.commit()
        await message.answer(f"–í–∞–ª—é—Ç–∞ '{currency_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await message.answer(f"–í–∞–ª—é—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{currency_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
async def delete_currency(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –∫—É—Ä—Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(UpdateCurrencyState.currency_name)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
@dp.message(UpdateCurrencyState.currency_name)
async def vvod_currency_name_to_update(message: types.Message, state: FSMContext):
    currency_name = message.text.upper() # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur.execute("SELECT currency_name FROM currencies WHERE currency_name = %s", (currency_name,))
    result = cur.fetchone()

    if result:
        # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
        await state.update_data(currency_name=currency_name)
        await message.answer(f"–í–∞–ª—é—Ç–∞ '{currency_name}' –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
        await state.set_state(UpdateCurrencyState.currency_rate)
    else:
        # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        await message.answer(f"–í–∞–ª—é—Ç–∞ '{currency_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –±–∞–∑–µ
@dp.message(UpdateCurrencyState.currency_rate)
async def vvod_new_currency_rate(message: types.Message, state: FSMContext):
    try:
        new_rate = float(message.text)
        data = await state.get_data()
        currency_name = data['currency_name']

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cur.execute("UPDATE currencies SET rate = %s WHERE currency_name = %s", (new_rate, currency_name))
        conn.commit()

        await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã '{currency_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_rate} —Ä—É–±.")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 85.50")
        return

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /get_currencies ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç —Å –∫—É—Ä—Å–∞–º–∏
@dp.message(Command('get_currencies'))
async def get_currencies(message: types.Message):
    # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–µ –∑–∞ —Å–ø–∏—Å–∫–æ–º –≤–∞–ª—é—Ç
    cur.execute("SELECT currency_name, rate FROM currencies ORDER BY currency_name")
    rows = cur.fetchall()

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å)
    if rows:
        response = "–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –∏ –∏—Ö –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:\n"
        for name, rate in rows:
            response += f"‚Ä¢ {name}: {rate}‚ÇΩ\n"
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
    else:
        response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç."

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ /convert ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
@dp.message(Command('convert'))
async def convert_command(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    await state.set_state(ConvertState.currency_name)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
@dp.message(ConvertState.currency_name)
async def process_currency_name(message: types.Message, state: FSMContext):
    currency_name = message.text.upper() # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –≤ –±–∞–∑–µ
    cur.execute("SELECT rate FROM currencies WHERE currency_name = %s", (currency_name,))
    result = cur.fetchone()

    # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    if result:
        await state.update_data(currency_name=currency_name, rate=result[0])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        await state.set_state(ConvertState.amount)
    # –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ
    else:
        await message.answer("–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()

# –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(ConvertState.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        rate = data['rate']
        currency_name = data['currency_name']

        result = amount * float(rate)
        await message.answer(f"{amount} {currency_name} = {result:.2f} —Ä—É–±.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())